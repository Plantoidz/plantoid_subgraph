// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GraceStarted extends ethereum.Event {
  get params(): GraceStarted__Params {
    return new GraceStarted__Params(this);
  }
}

export class GraceStarted__Params {
  _event: GraceStarted;

  constructor(event: GraceStarted) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewPlantoid extends ethereum.Event {
  get params(): NewPlantoid__Params {
    return new NewPlantoid__Params(this);
  }
}

export class NewPlantoid__Params {
  _event: NewPlantoid;

  constructor(event: NewPlantoid) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewSpawn extends ethereum.Event {
  get params(): NewSpawn__Params {
    return new NewSpawn__Params(this);
  }
}

export class NewSpawn__Params {
  _event: NewSpawn;

  constructor(event: NewSpawn) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get spawner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newPlantoid(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalAccepted extends ethereum.Event {
  get params(): ProposalAccepted__Params {
    return new ProposalAccepted__Params(this);
  }
}

export class ProposalAccepted__Params {
  _event: ProposalAccepted;

  constructor(event: ProposalAccepted) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalStarted extends ethereum.Event {
  get params(): ProposalStarted__Params {
    return new ProposalStarted__Params(this);
  }
}

export class ProposalStarted__Params {
  _event: ProposalStarted;

  constructor(event: ProposalStarted) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalSubmitted extends ethereum.Event {
  get params(): ProposalSubmitted__Params {
    return new ProposalSubmitted__Params(this);
  }
}

export class ProposalSubmitted__Params {
  _event: ProposalSubmitted;

  constructor(event: ProposalSubmitted) {
    this._event = event;
  }

  get proposer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalUri(): string {
    return this._event.parameters[1].value.toString();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProposalVetoed extends ethereum.Event {
  get params(): ProposalVetoed__Params {
    return new ProposalVetoed__Params(this);
  }
}

export class ProposalVetoed__Params {
  _event: ProposalVetoed;

  constructor(event: ProposalVetoed) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Revealed extends ethereum.Event {
  get params(): Revealed__Params {
    return new Revealed__Params(this);
  }
}

export class Revealed__Params {
  _event: Revealed;

  constructor(event: Revealed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoundInvalidated extends ethereum.Event {
  get params(): RoundInvalidated__Params {
    return new RoundInvalidated__Params(this);
  }
}

export class RoundInvalidated__Params {
  _event: RoundInvalidated;

  constructor(event: RoundInvalidated) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get votes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get choice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VotingStarted extends ethereum.Event {
  get params(): VotingStarted__Params {
    return new VotingStarted__Params(this);
  }
}

export class VotingStarted__Params {
  _event: VotingStarted;

  constructor(event: VotingStarted) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Plantoid__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFromBlock(): BigInt {
    return this.value0;
  }

  getVotes(): BigInt {
    return this.value1;
  }
}

export class Plantoid__currentRoundStateResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  get_round(): BigInt {
    return this.value0;
  }

  get_state(): i32 {
    return this.value1;
  }
}

export class Plantoid__roundsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8)),
    );
    return map;
  }

  getRoundStart(): BigInt {
    return this.value0;
  }

  getProposalEnd(): BigInt {
    return this.value1;
  }

  getVotingEnd(): BigInt {
    return this.value2;
  }

  getGraceEnd(): BigInt {
    return this.value3;
  }

  getProposalCount(): BigInt {
    return this.value4;
  }

  getTotalVotes(): BigInt {
    return this.value5;
  }

  getWinningProposal(): BigInt {
    return this.value6;
  }

  getFundsDistributed(): boolean {
    return this.value7;
  }

  getRoundState(): i32 {
    return this.value8;
  }
}

export class Plantoid__viewProposalsResult {
  value0: BigInt;
  value1: Address;
  value2: boolean;
  value3: string;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: boolean,
    value3: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getVotes(): BigInt {
    return this.value0;
  }

  getProposer(): Address {
    return this.value1;
  }

  getVetoed(): boolean {
    return this.value2;
  }

  getUri(): string {
    return this.value3;
  }
}

export class Plantoid extends ethereum.SmartContract {
  static bind(address: Address): Plantoid {
    return new Plantoid("Plantoid", address);
  }

  DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  artist(): Address {
    let result = super.call("artist", "artist():(address)", []);

    return result[0].toAddress();
  }

  try_artist(): ethereum.CallResult<Address> {
    let result = super.tryCall("artist", "artist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(param0: Address, param1: BigInt): Plantoid__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new Plantoid__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Plantoid__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plantoid__checkpointsResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentRoundState(): Plantoid__currentRoundStateResult {
    let result = super.call(
      "currentRoundState",
      "currentRoundState():(uint256,uint8)",
      [],
    );

    return new Plantoid__currentRoundStateResult(
      result[0].toBigInt(),
      result[1].toI32(),
    );
  }

  try_currentRoundState(): ethereum.CallResult<Plantoid__currentRoundStateResult> {
    let result = super.tryCall(
      "currentRoundState",
      "currentRoundState():(uint256,uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plantoid__currentRoundStateResult(
        value[0].toBigInt(),
        value[1].toI32(),
      ),
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegates(delegator: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(delegator),
    ]);

    return result[0].toAddress();
  }

  try_delegates(delegator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(delegator),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositThreshold(): BigInt {
    let result = super.call(
      "depositThreshold",
      "depositThreshold():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_depositThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositThreshold",
      "depositThreshold():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  escrow(): BigInt {
    let result = super.call("escrow", "escrow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_escrow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("escrow", "escrow():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentVotes(account: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriorVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPriorVotes(
    account: Address,
    blockNumber: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parent(): Address {
    let result = super.call("parent", "parent():(address)", []);

    return result[0].toAddress();
  }

  try_parent(): ethereum.CallResult<Address> {
    let result = super.tryCall("parent", "parent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  plantoidAddress(): Address {
    let result = super.call(
      "plantoidAddress",
      "plantoidAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_plantoidAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "plantoidAddress",
      "plantoidAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prerevealUri(): string {
    let result = super.call("prerevealUri", "prerevealUri():(string)", []);

    return result[0].toString();
  }

  try_prerevealUri(): ethereum.CallResult<string> {
    let result = super.tryCall("prerevealUri", "prerevealUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  proposalPeriod(): BigInt {
    let result = super.call("proposalPeriod", "proposalPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposalPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalPeriod",
      "proposalPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revealed(param0: BigInt): boolean {
    let result = super.call("revealed", "revealed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_revealed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("revealed", "revealed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  round(): BigInt {
    let result = super.call("round", "round():(uint256)", []);

    return result[0].toBigInt();
  }

  try_round(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("round", "round():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundState(_round: BigInt): i32 {
    let result = super.call("roundState", "roundState(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_round),
    ]);

    return result[0].toI32();
  }

  try_roundState(_round: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("roundState", "roundState(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_round),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rounds(param0: BigInt): Plantoid__roundsResult {
    let result = super.call(
      "rounds",
      "rounds(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Plantoid__roundsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toI32(),
    );
  }

  try_rounds(param0: BigInt): ethereum.CallResult<Plantoid__roundsResult> {
    let result = super.tryCall(
      "rounds",
      "rounds(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plantoid__roundsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toI32(),
      ),
    );
  }

  salts(param0: BigInt): Bytes {
    let result = super.call("salts", "salts(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_salts(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("salts", "salts(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  spawn(
    _round: BigInt,
    _newPlantoid: Address,
    _depositThreshold: BigInt,
    _roundThreshold: BigInt,
    _proposalPeriod: BigInt,
    _votingPeriod: BigInt,
    _gracePeriod: BigInt,
    _plantoidName: string,
    _plantoidSymbol: string,
    _prerevealUri: string,
  ): Address {
    let result = super.call(
      "spawn",
      "spawn(uint256,address,uint256,uint256,uint256,uint256,uint256,string,string,string):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromAddress(_newPlantoid),
        ethereum.Value.fromUnsignedBigInt(_depositThreshold),
        ethereum.Value.fromUnsignedBigInt(_roundThreshold),
        ethereum.Value.fromUnsignedBigInt(_proposalPeriod),
        ethereum.Value.fromUnsignedBigInt(_votingPeriod),
        ethereum.Value.fromUnsignedBigInt(_gracePeriod),
        ethereum.Value.fromString(_plantoidName),
        ethereum.Value.fromString(_plantoidSymbol),
        ethereum.Value.fromString(_prerevealUri),
      ],
    );

    return result[0].toAddress();
  }

  try_spawn(
    _round: BigInt,
    _newPlantoid: Address,
    _depositThreshold: BigInt,
    _roundThreshold: BigInt,
    _proposalPeriod: BigInt,
    _votingPeriod: BigInt,
    _gracePeriod: BigInt,
    _plantoidName: string,
    _plantoidSymbol: string,
    _prerevealUri: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "spawn",
      "spawn(uint256,address,uint256,uint256,uint256,uint256,uint256,string,string,string):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromAddress(_newPlantoid),
        ethereum.Value.fromUnsignedBigInt(_depositThreshold),
        ethereum.Value.fromUnsignedBigInt(_roundThreshold),
        ethereum.Value.fromUnsignedBigInt(_proposalPeriod),
        ethereum.Value.fromUnsignedBigInt(_votingPeriod),
        ethereum.Value.fromUnsignedBigInt(_gracePeriod),
        ethereum.Value.fromString(_plantoidName),
        ethereum.Value.fromString(_plantoidSymbol),
        ethereum.Value.fromString(_prerevealUri),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  spawnCustom(
    _round: BigInt,
    _newPlantoidSpawner: Address,
    _newPlantoid: Address,
    _depositThreshold: BigInt,
    _roundThreshold: BigInt,
    _proposalPeriod: BigInt,
    _votingPeriod: BigInt,
    _gracePeriod: BigInt,
    _plantoidName: string,
    _plantoidSymbol: string,
    _prerevealUri: string,
  ): Address {
    let result = super.call(
      "spawnCustom",
      "spawnCustom(uint256,address,address,uint256,uint256,uint256,uint256,uint256,string,string,string):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromAddress(_newPlantoidSpawner),
        ethereum.Value.fromAddress(_newPlantoid),
        ethereum.Value.fromUnsignedBigInt(_depositThreshold),
        ethereum.Value.fromUnsignedBigInt(_roundThreshold),
        ethereum.Value.fromUnsignedBigInt(_proposalPeriod),
        ethereum.Value.fromUnsignedBigInt(_votingPeriod),
        ethereum.Value.fromUnsignedBigInt(_gracePeriod),
        ethereum.Value.fromString(_plantoidName),
        ethereum.Value.fromString(_plantoidSymbol),
        ethereum.Value.fromString(_prerevealUri),
      ],
    );

    return result[0].toAddress();
  }

  try_spawnCustom(
    _round: BigInt,
    _newPlantoidSpawner: Address,
    _newPlantoid: Address,
    _depositThreshold: BigInt,
    _roundThreshold: BigInt,
    _proposalPeriod: BigInt,
    _votingPeriod: BigInt,
    _gracePeriod: BigInt,
    _plantoidName: string,
    _plantoidSymbol: string,
    _prerevealUri: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "spawnCustom",
      "spawnCustom(uint256,address,address,uint256,uint256,uint256,uint256,uint256,string,string,string):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromAddress(_newPlantoidSpawner),
        ethereum.Value.fromAddress(_newPlantoid),
        ethereum.Value.fromUnsignedBigInt(_depositThreshold),
        ethereum.Value.fromUnsignedBigInt(_roundThreshold),
        ethereum.Value.fromUnsignedBigInt(_proposalPeriod),
        ethereum.Value.fromUnsignedBigInt(_votingPeriod),
        ethereum.Value.fromUnsignedBigInt(_gracePeriod),
        ethereum.Value.fromString(_plantoidName),
        ethereum.Value.fromString(_plantoidSymbol),
        ethereum.Value.fromString(_prerevealUri),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  spawner(): Address {
    let result = super.call("spawner", "spawner():(address)", []);

    return result[0].toAddress();
  }

  try_spawner(): ethereum.CallResult<Address> {
    let result = super.tryCall("spawner", "spawner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  threshold(): BigInt {
    let result = super.call("threshold", "threshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_threshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("threshold", "threshold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewProposals(
    _round: BigInt,
    _proposal: BigInt,
  ): Plantoid__viewProposalsResult {
    let result = super.call(
      "viewProposals",
      "viewProposals(uint256,uint256):(uint256,address,bool,string)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromUnsignedBigInt(_proposal),
      ],
    );

    return new Plantoid__viewProposalsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBoolean(),
      result[3].toString(),
    );
  }

  try_viewProposals(
    _round: BigInt,
    _proposal: BigInt,
  ): ethereum.CallResult<Plantoid__viewProposalsResult> {
    let result = super.tryCall(
      "viewProposals",
      "viewProposals(uint256,uint256):(uint256,address,bool,string)",
      [
        ethereum.Value.fromUnsignedBigInt(_round),
        ethereum.Value.fromUnsignedBigInt(_proposal),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Plantoid__viewProposalsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBoolean(),
        value[3].toString(),
      ),
    );
  }

  votesToDelegate(delegator: Address): BigInt {
    let result = super.call(
      "votesToDelegate",
      "votesToDelegate(address):(uint96)",
      [ethereum.Value.fromAddress(delegator)],
    );

    return result[0].toBigInt();
  }

  try_votesToDelegate(delegator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votesToDelegate",
      "votesToDelegate(address):(uint96)",
      [ethereum.Value.fromAddress(delegator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingEnd(param0: BigInt): BigInt {
    let result = super.call("votingEnd", "votingEnd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_votingEnd(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingEnd", "votingEnd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawableBalances(param0: Address): BigInt {
    let result = super.call(
      "withdrawableBalances",
      "withdrawableBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_withdrawableBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableBalances",
      "withdrawableBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AdvanceRoundCall extends ethereum.Call {
  get inputs(): AdvanceRoundCall__Inputs {
    return new AdvanceRoundCall__Inputs(this);
  }

  get outputs(): AdvanceRoundCall__Outputs {
    return new AdvanceRoundCall__Outputs(this);
  }
}

export class AdvanceRoundCall__Inputs {
  _call: AdvanceRoundCall;

  constructor(call: AdvanceRoundCall) {
    this._call = call;
  }
}

export class AdvanceRoundCall__Outputs {
  _call: AdvanceRoundCall;

  constructor(call: AdvanceRoundCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _plantoid(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _artist(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _parent(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _prerevealUri(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _thresholdsAndPeriods(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevealContentCall extends ethereum.Call {
  get inputs(): RevealContentCall__Inputs {
    return new RevealContentCall__Inputs(this);
  }

  get outputs(): RevealContentCall__Outputs {
    return new RevealContentCall__Outputs(this);
  }
}

export class RevealContentCall__Inputs {
  _call: RevealContentCall;

  constructor(call: RevealContentCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenUri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RevealContentCall__Outputs {
  _call: RevealContentCall;

  constructor(call: RevealContentCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetPrerevealURICall extends ethereum.Call {
  get inputs(): SetPrerevealURICall__Inputs {
    return new SetPrerevealURICall__Inputs(this);
  }

  get outputs(): SetPrerevealURICall__Outputs {
    return new SetPrerevealURICall__Outputs(this);
  }
}

export class SetPrerevealURICall__Inputs {
  _call: SetPrerevealURICall;

  constructor(call: SetPrerevealURICall) {
    this._call = call;
  }

  get _prerevealUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetPrerevealURICall__Outputs {
  _call: SetPrerevealURICall;

  constructor(call: SetPrerevealURICall) {
    this._call = call;
  }
}

export class SettleRoundCall extends ethereum.Call {
  get inputs(): SettleRoundCall__Inputs {
    return new SettleRoundCall__Inputs(this);
  }

  get outputs(): SettleRoundCall__Outputs {
    return new SettleRoundCall__Outputs(this);
  }
}

export class SettleRoundCall__Inputs {
  _call: SettleRoundCall;

  constructor(call: SettleRoundCall) {
    this._call = call;
  }
}

export class SettleRoundCall__Outputs {
  _call: SettleRoundCall;

  constructor(call: SettleRoundCall) {
    this._call = call;
  }
}

export class SpawnCall extends ethereum.Call {
  get inputs(): SpawnCall__Inputs {
    return new SpawnCall__Inputs(this);
  }

  get outputs(): SpawnCall__Outputs {
    return new SpawnCall__Outputs(this);
  }
}

export class SpawnCall__Inputs {
  _call: SpawnCall;

  constructor(call: SpawnCall) {
    this._call = call;
  }

  get _round(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPlantoid(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _depositThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _roundThreshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _proposalPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _votingPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _gracePeriod(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _plantoidName(): string {
    return this._call.inputValues[7].value.toString();
  }

  get _plantoidSymbol(): string {
    return this._call.inputValues[8].value.toString();
  }

  get _prerevealUri(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class SpawnCall__Outputs {
  _call: SpawnCall;

  constructor(call: SpawnCall) {
    this._call = call;
  }

  get _plantoid(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SpawnCustomCall extends ethereum.Call {
  get inputs(): SpawnCustomCall__Inputs {
    return new SpawnCustomCall__Inputs(this);
  }

  get outputs(): SpawnCustomCall__Outputs {
    return new SpawnCustomCall__Outputs(this);
  }
}

export class SpawnCustomCall__Inputs {
  _call: SpawnCustomCall;

  constructor(call: SpawnCustomCall) {
    this._call = call;
  }

  get _round(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPlantoidSpawner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _newPlantoid(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _depositThreshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _roundThreshold(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _proposalPeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _votingPeriod(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _gracePeriod(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _plantoidName(): string {
    return this._call.inputValues[8].value.toString();
  }

  get _plantoidSymbol(): string {
    return this._call.inputValues[9].value.toString();
  }

  get _prerevealUri(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class SpawnCustomCall__Outputs {
  _call: SpawnCustomCall;

  constructor(call: SpawnCustomCall) {
    this._call = call;
  }

  get _plantoid(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class StartProposalsCall extends ethereum.Call {
  get inputs(): StartProposalsCall__Inputs {
    return new StartProposalsCall__Inputs(this);
  }

  get outputs(): StartProposalsCall__Outputs {
    return new StartProposalsCall__Outputs(this);
  }
}

export class StartProposalsCall__Inputs {
  _call: StartProposalsCall;

  constructor(call: StartProposalsCall) {
    this._call = call;
  }
}

export class StartProposalsCall__Outputs {
  _call: StartProposalsCall;

  constructor(call: StartProposalsCall) {
    this._call = call;
  }
}

export class SubmitProposalCall extends ethereum.Call {
  get inputs(): SubmitProposalCall__Inputs {
    return new SubmitProposalCall__Inputs(this);
  }

  get outputs(): SubmitProposalCall__Outputs {
    return new SubmitProposalCall__Outputs(this);
  }
}

export class SubmitProposalCall__Inputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get _proposalUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SubmitProposalCall__Outputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }
}

export class SubmitVoteCall extends ethereum.Call {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get _proposal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VetoProposalCall extends ethereum.Call {
  get inputs(): VetoProposalCall__Inputs {
    return new VetoProposalCall__Inputs(this);
  }

  get outputs(): VetoProposalCall__Outputs {
    return new VetoProposalCall__Outputs(this);
  }
}

export class VetoProposalCall__Inputs {
  _call: VetoProposalCall;

  constructor(call: VetoProposalCall) {
    this._call = call;
  }

  get _proposal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VetoProposalCall__Outputs {
  _call: VetoProposalCall;

  constructor(call: VetoProposalCall) {
    this._call = call;
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }
}
